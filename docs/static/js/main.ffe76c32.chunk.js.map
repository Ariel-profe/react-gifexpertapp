{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACQ,sBAAMC,SAXO,SAACC,GAClBA,EAAEC,iBAGCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAKd,SACA,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCNjBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACdC,EADc,iDAEyBC,UAAWH,GAFpC,+DAGDI,MAAMF,GAHL,cAGdG,EAHc,gBAIGA,EAAKC,OAJR,uBAIZC,EAJY,EAIZA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVlB,kBAcbM,GAda,4CAAH,sDCARO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGhC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,kCAAKA,EAAL,WCACO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAExB,ECN0B,SAACA,GAEzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAoBA,OAbFC,qBAAU,WAERxB,EAASC,GACJwB,MAAM,SAAAC,GACCH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAIxB,CAACpB,IAGKqB,EDhBuBK,CAAc1B,GAAjCa,EAAb,EAAON,KAAca,EAArB,EAAqBA,QAWrB,OACE,qCACE,qBAAIJ,UAAU,oCAAd,cAAoDhB,EAApD,OAGCoB,GAAW,mBAAGJ,UAAU,mCAAb,wBACZ,qBAAKA,UAAU,YAAf,SAGIH,EAAOJ,KAAI,SAACC,GAAD,OACT,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEGnBgB,EA5BM,WAGb,MAAoCzC,mBAAS,CAAC,gBAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAKJ,OACI,qCACA,iDACA,cAAC,EAAD,CAAaA,cAAgBA,IAC9B,uBAEA,6BAEK2C,EAAWnB,KAAK,SAAAT,GAAQ,OAEpB,aADA,CACC,EAAD,CAAwBA,SAAWA,GAArBA,Y,MClB9B6B,IAASC,OAEP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.ffe76c32.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        \r\n        //Validaciones para el input\r\n        if(inputValue.trim().length > 2){\r\n            setCategories( cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n            <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={ handleInputChange }\r\n            />\r\n            </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\n\r\n export const getGifs = async (category) => {\r\n    const url =\r\n      `https://api.giphy.com/v1/gifs/search?q=${ encodeURI (category)}&limit=10&api_key=IBgGgsMPb8yW4lI0mJMkXhfIT3TVs2ZC`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map((img) => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url,\r\n      };\r\n    });\r\n\r\n    return gifs\r\n  };","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n\r\n    // console.log(id, title, url)\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            <img src={url} alt={title} />   \r\n            <p> {title} </p>     \r\n        </div>\r\n    )\r\n}\r\n","// Componente que recibira elementos que coincidan con las categorias hechas\r\n\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\n\r\n// import { useState, useEffect } from \"react\";\r\n// import { getGifs } from \"../helpers/getGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  // const [images, setImages] = useState([]);\r\n  const {data: images, loading} = useFetchGifs( category );\r\n\r\n  \r\n  //Use effect permite ejecutar un codigo de manera condicional\r\n  // useEffect(() => {\r\n  //   getGifs(category)\r\n  //       .then(imgs => setImages(imgs))\r\n  // }, [category]); //si no hay listas de dependencias, el codigo se ejecuta una vez\r\n\r\n \r\n\r\n  return (\r\n    <>\r\n      <h3 className='animate__animated animate__fadeIn'> {category} </h3>\r\n\r\n      {/* { loading ? 'Cargando...' : null} */}\r\n      {loading && <p className='animate__animated animate__flash'>Loading...</p>}\r\n      <div className=\"card-grid\">\r\n        \r\n          {\r\n          images.map((img) => (\r\n            <GifGridItem key={img.id} {...img} />\r\n          ))\r\n          }\r\n        </div>\r\n    </>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport {getGifs} from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n      \r\n  //Use effect permite ejecutar un codigo de manera condicional\r\n  useEffect(() => {\r\n\r\n    getGifs( category )\r\n        .then( imgs => {\r\n                setstate({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n        })\r\n   \r\n  }, [category]); //solo evaluar el cambio de efecto si la categoria cambia\r\n\r\n\r\n    return state; // es un obj con una data y un loading en true\r\n}","import {useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\n\r\nconst GifExpertApp = () => {\r\n\r\n        // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n        const [categories, setCategories] = useState(['Dragon Ball']);\r\n\r\n        // const handleAdd = () => {\r\n        //     setCategories( cats => [...cats, 'X-Men']);\r\n        // }\r\n    return (\r\n        <>\r\n        <h2> Gif Expert App</h2>\r\n        <AddCategory setCategories={ setCategories }/> \r\n       <hr/>\r\n\r\n       <ol>\r\n           { \r\n            categories.map( category => (\r\n                // return <li key={category}> {category}  </li>\r\n                <GifGrid key={category} category={ category } />\r\n            ))\r\n           }\r\n       </ol>\r\n        </>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  \n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}